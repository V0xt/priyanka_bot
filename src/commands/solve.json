module.exports = {
	name: 'solve',
	description: 'Solve math expression. NOT WORKING',
	execute(message) {
		let expression = message.content.slice(7);
		console.log(expression);
		message.channel.send(result);
	},

	IsDelimiter = (c) => {
		if ((" =".indexOf(c) != -1)) {
		  return true;
		}
		return false;
	  }
	  
	IsOperator = (c) => {
	if (("+-/*^()".indexOf(c) != -1)) {
		return true;
	}
	return false; 
	}
	
	GetPriority = (s) => {
		switch (s) {
			case "(":
		case ")":
			return 1;
		case "+":
		case "-":
			return 2;
		case "*":
		case "/":
			return 3;
		case "^":
			return 4;
		default:
			return 5;
		}
	}
	
	Calculate = (input) => {
		let output = GetExpression(input);
	console.log(output);    
		let result = Counting(output);
		return Number(result);
	}

	GetExpression = (input) => {
	let output = ''; 
	let operStack = []; 
	for (let i = 0; i < input.length; i++) {
		if (IsDelimiter(input[i]))
		continue;
		if (!isNaN(input[i])) {
	while (!IsDelimiter(input[i]) && !IsOperator(input[i])) {
		output += input[i];
		i++; 
		if (i === input.length) break;
	}
	output += ' '; 
	i--;
	//console.log(output)       
		}
		if (IsOperator(input[i])) {
	if (input[i] === '(') { 
		operStack.push(input[i]);
	} else if (input[i] === ')') {
		let s = operStack.pop();
		while (s != '(') {
			output += s + ' ';
			s = operStack.pop();                                     
		}
	} else {
		if (operStack.length > 0 && GetPriority(input[i]) <= GetPriority(operStack                      [operStack.length - 1])) {
		output += String(operStack.pop()) + ' ';
		} 
		operStack.push(String(input[i]));                
	}
		}
	}
	while (operStack.length > 0) {
		output += operStack.pop() + ' ';
	//console.log(output)
	}      
	return output; 
	}
	
	Counting = (input) => {
		//console.log(input)
		let result = 0; 
		let temp = [];
	
		for (let i = 0; i < input.length; i++) {
			if (!isNaN(input[i])) {
			let str = '';
			while (!IsDelimiter(input[i]) && !IsOperator(input[i])) {
				str += input[i]; 
				i++;
				if (i === input.length) {         
				break;
				}
			}   
			temp.push(str);
			//console.log(temp);
			i--;
			}
			else if (IsOperator(input[i])) {
			//console.log(input[i])
			let x = temp.pop(); 
			let y = temp.pop();
	
			switch (input[i]) { 
				case '+': result = Number(y) + Number(x); break;
				case '-': result = Number(y) - Number(x); break;
				case '*': result = Number(y) * Number(x); break;
				case '/': result = Number(y) / Number(x); break;
				case '^': result = Math.pow(y, x); break;
			}
			temp.push(Number(result));
			//console.log(result);
			}
			i++;
		}
		return temp[temp.length - 1]; 
		}
	//console.log(Calculate('3 - 2'));
	//console.log(Calculate('3 * 2 + 5'));
	//console.log(Calculate('(12-3)/3'));
	//console.log(Calculate('5 + 2 ^3'));
	//console.log(Calculate('3 * 2 -11'));
	//console.log(Calculate('2 + 1 - 12 /3'));
	//console.log(Calculate('( 6 - 3) ^2 - 11'));
	console.log(Calculate('6 - 3 ^ 2 - 11'));  
	//console.log(Calculate('162/(2+1)^4'));
	//console.log(Calculate('3 + 4 * 2 / ( ( ( ( 1 - 5 ) ^ ) 2 ) ^ 3 )'));
	//console.log(Calculate('19 * ( 14.2 - 15 ) - 1 - ( 3 ^ 4 ) - 97 / 3'));
};
